/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Importer : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Importer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Importer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Importer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AssimpPINVOKE.delete_Importer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Importer() : this(AssimpPINVOKE.new_Importer__SWIG_0(), true) {
  }

  public Importer(Importer other) : this(AssimpPINVOKE.new_Importer__SWIG_1(Importer.getCPtr(other)), true) {
    if (AssimpPINVOKE.SWIGPendingException.Pending) throw AssimpPINVOKE.SWIGPendingException.Retrieve();
  }

  public aiReturn RegisterLoader(SWIGTYPE_p_Assimp__BaseImporter pImp) {
    aiReturn ret = (aiReturn)AssimpPINVOKE.Importer_RegisterLoader(swigCPtr, SWIGTYPE_p_Assimp__BaseImporter.getCPtr(pImp));
    return ret;
  }

  public aiReturn UnregisterLoader(SWIGTYPE_p_Assimp__BaseImporter pImp) {
    aiReturn ret = (aiReturn)AssimpPINVOKE.Importer_UnregisterLoader(swigCPtr, SWIGTYPE_p_Assimp__BaseImporter.getCPtr(pImp));
    return ret;
  }

  public aiReturn RegisterPPStep(SWIGTYPE_p_Assimp__BaseProcess pImp) {
    aiReturn ret = (aiReturn)AssimpPINVOKE.Importer_RegisterPPStep(swigCPtr, SWIGTYPE_p_Assimp__BaseProcess.getCPtr(pImp));
    return ret;
  }

  public aiReturn UnregisterPPStep(SWIGTYPE_p_Assimp__BaseProcess pImp) {
    aiReturn ret = (aiReturn)AssimpPINVOKE.Importer_UnregisterPPStep(swigCPtr, SWIGTYPE_p_Assimp__BaseProcess.getCPtr(pImp));
    return ret;
  }

  public void SetPropertyInteger(string szName, int iValue, SWIGTYPE_p_bool bWasExisting) {
    AssimpPINVOKE.Importer_SetPropertyInteger__SWIG_0(swigCPtr, szName, iValue, SWIGTYPE_p_bool.getCPtr(bWasExisting));
  }

  public void SetPropertyInteger(string szName, int iValue) {
    AssimpPINVOKE.Importer_SetPropertyInteger__SWIG_1(swigCPtr, szName, iValue);
  }

  public void SetPropertyFloat(string szName, float fValue, SWIGTYPE_p_bool bWasExisting) {
    AssimpPINVOKE.Importer_SetPropertyFloat__SWIG_0(swigCPtr, szName, fValue, SWIGTYPE_p_bool.getCPtr(bWasExisting));
  }

  public void SetPropertyFloat(string szName, float fValue) {
    AssimpPINVOKE.Importer_SetPropertyFloat__SWIG_1(swigCPtr, szName, fValue);
  }

  public void SetPropertyString(string szName, string sValue, SWIGTYPE_p_bool bWasExisting) {
    AssimpPINVOKE.Importer_SetPropertyString__SWIG_0(swigCPtr, szName, sValue, SWIGTYPE_p_bool.getCPtr(bWasExisting));
    if (AssimpPINVOKE.SWIGPendingException.Pending) throw AssimpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPropertyString(string szName, string sValue) {
    AssimpPINVOKE.Importer_SetPropertyString__SWIG_1(swigCPtr, szName, sValue);
    if (AssimpPINVOKE.SWIGPendingException.Pending) throw AssimpPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetPropertyInteger(string szName, int iErrorReturn) {
    int ret = AssimpPINVOKE.Importer_GetPropertyInteger__SWIG_0(swigCPtr, szName, iErrorReturn);
    return ret;
  }

  public int GetPropertyInteger(string szName) {
    int ret = AssimpPINVOKE.Importer_GetPropertyInteger__SWIG_1(swigCPtr, szName);
    return ret;
  }

  public float GetPropertyFloat(string szName, float fErrorReturn) {
    float ret = AssimpPINVOKE.Importer_GetPropertyFloat__SWIG_0(swigCPtr, szName, fErrorReturn);
    return ret;
  }

  public float GetPropertyFloat(string szName) {
    float ret = AssimpPINVOKE.Importer_GetPropertyFloat__SWIG_1(swigCPtr, szName);
    return ret;
  }

  public string GetPropertyString(string szName, string sErrorReturn) {
    string ret = AssimpPINVOKE.Importer_GetPropertyString__SWIG_0(swigCPtr, szName, sErrorReturn);
    if (AssimpPINVOKE.SWIGPendingException.Pending) throw AssimpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetPropertyString(string szName) {
    string ret = AssimpPINVOKE.Importer_GetPropertyString__SWIG_1(swigCPtr, szName);
    return ret;
  }

  public void SetIOHandler(IOSystem pIOHandler) {
    AssimpPINVOKE.Importer_SetIOHandler(swigCPtr, IOSystem.getCPtr(pIOHandler));
  }

  public IOSystem GetIOHandler() {
    IntPtr cPtr = AssimpPINVOKE.Importer_GetIOHandler(swigCPtr);
    IOSystem ret = (cPtr == IntPtr.Zero) ? null : new IOSystem(cPtr, false);
    return ret;
  }

  public bool IsDefaultIOHandler() {
    bool ret = AssimpPINVOKE.Importer_IsDefaultIOHandler(swigCPtr);
    return ret;
  }

  public bool ValidateFlags(uint pFlags) {
    bool ret = AssimpPINVOKE.Importer_ValidateFlags(swigCPtr, pFlags);
    return ret;
  }

  public aiScene ReadFile(string pFile, uint pFlags) {
    IntPtr cPtr = AssimpPINVOKE.Importer_ReadFile__SWIG_0(swigCPtr, pFile, pFlags);
    aiScene ret = (cPtr == IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public aiScene ReadFileFromMemory(SWIGTYPE_p_void pBuffer, uint pLength, uint pFlags, string pHint) {
    IntPtr cPtr = AssimpPINVOKE.Importer_ReadFileFromMemory__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(pBuffer), pLength, pFlags, pHint);
    aiScene ret = (cPtr == IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public aiScene ReadFileFromMemory(SWIGTYPE_p_void pBuffer, uint pLength, uint pFlags) {
    IntPtr cPtr = AssimpPINVOKE.Importer_ReadFileFromMemory__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(pBuffer), pLength, pFlags);
    aiScene ret = (cPtr == IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public aiScene ApplyPostProcessing(uint pFlags) {
    IntPtr cPtr = AssimpPINVOKE.Importer_ApplyPostProcessing(swigCPtr, pFlags);
    aiScene ret = (cPtr == IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public void FreeScene() {
    AssimpPINVOKE.Importer_FreeScene(swigCPtr);
  }

  public string GetErrorString() {
    string ret = AssimpPINVOKE.Importer_GetErrorString(swigCPtr);
    return ret;
  }

  public bool IsExtensionSupported(string szExtension) {
    bool ret = AssimpPINVOKE.Importer_IsExtensionSupported__SWIG_0(swigCPtr, szExtension);
    return ret;
  }

  public void GetExtensionList(aiString szOut) {
    AssimpPINVOKE.Importer_GetExtensionList__SWIG_0(swigCPtr, aiString.getCPtr(szOut));
    if (AssimpPINVOKE.SWIGPendingException.Pending) throw AssimpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetExtensionList(SWIGTYPE_p_std__string szOut) {
    AssimpPINVOKE.Importer_GetExtensionList__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(szOut));
    if (AssimpPINVOKE.SWIGPendingException.Pending) throw AssimpPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Assimp__BaseImporter FindLoader(string szExtension) {
    IntPtr cPtr = AssimpPINVOKE.Importer_FindLoader(swigCPtr, szExtension);
    SWIGTYPE_p_Assimp__BaseImporter ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Assimp__BaseImporter(cPtr, false);
    return ret;
  }

  public aiScene GetScene() {
    IntPtr cPtr = AssimpPINVOKE.Importer_GetScene(swigCPtr);
    aiScene ret = (cPtr == IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public aiScene GetOrphanedScene() {
    IntPtr cPtr = AssimpPINVOKE.Importer_GetOrphanedScene(swigCPtr);
    aiScene ret = (cPtr == IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public void GetMemoryRequirements(aiMemoryInfo arg0) {
    AssimpPINVOKE.Importer_GetMemoryRequirements(swigCPtr, aiMemoryInfo.getCPtr(arg0));
    if (AssimpPINVOKE.SWIGPendingException.Pending) throw AssimpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetExtraVerbose(bool bDo) {
    AssimpPINVOKE.Importer_SetExtraVerbose(swigCPtr, bDo);
  }

}
