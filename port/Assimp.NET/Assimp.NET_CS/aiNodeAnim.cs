/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class aiNodeAnim : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiNodeAnim(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(aiNodeAnim obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiNodeAnim() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Assimp_NETPINVOKE.delete_aiNodeAnim(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public aiString mNodeName {
    set {
      Assimp_NETPINVOKE.aiNodeAnim_mNodeName_set(swigCPtr, aiString.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Assimp_NETPINVOKE.aiNodeAnim_mNodeName_get(swigCPtr);
      aiString ret = (cPtr == IntPtr.Zero) ? null : new aiString(cPtr, false);
      return ret;
    } 
  }

  public uint mNumPositionKeys {
    set {
      Assimp_NETPINVOKE.aiNodeAnim_mNumPositionKeys_set(swigCPtr, value);
    } 
    get {
      uint ret = Assimp_NETPINVOKE.aiNodeAnim_mNumPositionKeys_get(swigCPtr);
      return ret;
    } 
  }

  public aiVectorKey mPositionKeys {
    set {
      Assimp_NETPINVOKE.aiNodeAnim_mPositionKeys_set(swigCPtr, aiVectorKey.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Assimp_NETPINVOKE.aiNodeAnim_mPositionKeys_get(swigCPtr);
      aiVectorKey ret = (cPtr == IntPtr.Zero) ? null : new aiVectorKey(cPtr, false);
      return ret;
    } 
  }

  public uint mNumRotationKeys {
    set {
      Assimp_NETPINVOKE.aiNodeAnim_mNumRotationKeys_set(swigCPtr, value);
    } 
    get {
      uint ret = Assimp_NETPINVOKE.aiNodeAnim_mNumRotationKeys_get(swigCPtr);
      return ret;
    } 
  }

  public aiQuatKey mRotationKeys {
    set {
      Assimp_NETPINVOKE.aiNodeAnim_mRotationKeys_set(swigCPtr, aiQuatKey.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Assimp_NETPINVOKE.aiNodeAnim_mRotationKeys_get(swigCPtr);
      aiQuatKey ret = (cPtr == IntPtr.Zero) ? null : new aiQuatKey(cPtr, false);
      return ret;
    } 
  }

  public uint mNumScalingKeys {
    set {
      Assimp_NETPINVOKE.aiNodeAnim_mNumScalingKeys_set(swigCPtr, value);
    } 
    get {
      uint ret = Assimp_NETPINVOKE.aiNodeAnim_mNumScalingKeys_get(swigCPtr);
      return ret;
    } 
  }

  public aiVectorKey mScalingKeys {
    set {
      Assimp_NETPINVOKE.aiNodeAnim_mScalingKeys_set(swigCPtr, aiVectorKey.getCPtr(value));
    } 
    get {
      IntPtr cPtr = Assimp_NETPINVOKE.aiNodeAnim_mScalingKeys_get(swigCPtr);
      aiVectorKey ret = (cPtr == IntPtr.Zero) ? null : new aiVectorKey(cPtr, false);
      return ret;
    } 
  }

  public aiAnimBehaviour mPreState {
    set {
      Assimp_NETPINVOKE.aiNodeAnim_mPreState_set(swigCPtr, (int)value);
    } 
    get {
      aiAnimBehaviour ret = (aiAnimBehaviour)Assimp_NETPINVOKE.aiNodeAnim_mPreState_get(swigCPtr);
      return ret;
    } 
  }

  public aiAnimBehaviour mPostState {
    set {
      Assimp_NETPINVOKE.aiNodeAnim_mPostState_set(swigCPtr, (int)value);
    } 
    get {
      aiAnimBehaviour ret = (aiAnimBehaviour)Assimp_NETPINVOKE.aiNodeAnim_mPostState_get(swigCPtr);
      return ret;
    } 
  }

  public aiNodeAnim() : this(Assimp_NETPINVOKE.new_aiNodeAnim(), true) {
  }

}
