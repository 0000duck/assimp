/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Assimp_NET {
  public static uint MAXLEN {
    get {
      uint ret = Assimp_NETPINVOKE.MAXLEN_get();
      return ret;
    } 
  }

  public static aiVector2D __add__(aiVector2D v1, aiVector2D v2) {
    aiVector2D ret = new aiVector2D(Assimp_NETPINVOKE.__add__(aiVector2D.getCPtr(v1), aiVector2D.getCPtr(v2)), true);
    if (Assimp_NETPINVOKE.SWIGPendingException.Pending) throw Assimp_NETPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static aiVector2D __sub__(aiVector2D v1, aiVector2D v2) {
    aiVector2D ret = new aiVector2D(Assimp_NETPINVOKE.__sub____SWIG_0(aiVector2D.getCPtr(v1), aiVector2D.getCPtr(v2)), true);
    if (Assimp_NETPINVOKE.SWIGPendingException.Pending) throw Assimp_NETPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float __mul__(aiVector2D v1, aiVector2D v2) {
    float ret = Assimp_NETPINVOKE.__mul____SWIG_0(aiVector2D.getCPtr(v1), aiVector2D.getCPtr(v2));
    if (Assimp_NETPINVOKE.SWIGPendingException.Pending) throw Assimp_NETPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static aiVector2D __mul__(float f, aiVector2D v) {
    aiVector2D ret = new aiVector2D(Assimp_NETPINVOKE.__mul____SWIG_1(f, aiVector2D.getCPtr(v)), true);
    if (Assimp_NETPINVOKE.SWIGPendingException.Pending) throw Assimp_NETPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static aiVector2D __mul__(aiVector2D v, float f) {
    aiVector2D ret = new aiVector2D(Assimp_NETPINVOKE.__mul____SWIG_2(aiVector2D.getCPtr(v), f), true);
    if (Assimp_NETPINVOKE.SWIGPendingException.Pending) throw Assimp_NETPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static aiVector2D __div__(aiVector2D v, float f) {
    aiVector2D ret = new aiVector2D(Assimp_NETPINVOKE.__div____SWIG_0(aiVector2D.getCPtr(v), f), true);
    if (Assimp_NETPINVOKE.SWIGPendingException.Pending) throw Assimp_NETPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static aiVector2D __div__(aiVector2D v, aiVector2D v2) {
    aiVector2D ret = new aiVector2D(Assimp_NETPINVOKE.__div____SWIG_1(aiVector2D.getCPtr(v), aiVector2D.getCPtr(v2)), true);
    if (Assimp_NETPINVOKE.SWIGPendingException.Pending) throw Assimp_NETPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static aiVector2D __sub__(aiVector2D v) {
    aiVector2D ret = new aiVector2D(Assimp_NETPINVOKE.__sub____SWIG_1(aiVector2D.getCPtr(v)), true);
    if (Assimp_NETPINVOKE.SWIGPendingException.Pending) throw Assimp_NETPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static aiReturn aiGetMaterialProperty(aiMaterial pMat, string pKey, uint type, uint index, SWIGTYPE_p_p_aiMaterialProperty pPropOut) {
    aiReturn ret = (aiReturn)Assimp_NETPINVOKE.aiGetMaterialProperty(aiMaterial.getCPtr(pMat), pKey, type, index, SWIGTYPE_p_p_aiMaterialProperty.getCPtr(pPropOut));
    return ret;
  }

  public static aiReturn aiGetMaterialFloatArray(aiMaterial pMat, string pKey, uint type, uint index, SWIGTYPE_p_float pOut, SWIGTYPE_p_unsigned_int pMax) {
    aiReturn ret = (aiReturn)Assimp_NETPINVOKE.aiGetMaterialFloatArray(aiMaterial.getCPtr(pMat), pKey, type, index, SWIGTYPE_p_float.getCPtr(pOut), SWIGTYPE_p_unsigned_int.getCPtr(pMax));
    return ret;
  }

  public static aiReturn aiGetMaterialFloat(aiMaterial pMat, string pKey, uint type, uint index, SWIGTYPE_p_float pOut) {
    aiReturn ret = (aiReturn)Assimp_NETPINVOKE.aiGetMaterialFloat(aiMaterial.getCPtr(pMat), pKey, type, index, SWIGTYPE_p_float.getCPtr(pOut));
    return ret;
  }

  public static aiReturn aiGetMaterialIntegerArray(aiMaterial pMat, string pKey, uint type, uint index, SWIGTYPE_p_int pOut, SWIGTYPE_p_unsigned_int pMax) {
    aiReturn ret = (aiReturn)Assimp_NETPINVOKE.aiGetMaterialIntegerArray(aiMaterial.getCPtr(pMat), pKey, type, index, SWIGTYPE_p_int.getCPtr(pOut), SWIGTYPE_p_unsigned_int.getCPtr(pMax));
    return ret;
  }

  public static aiReturn aiGetMaterialInteger(aiMaterial pMat, string pKey, uint type, uint index, SWIGTYPE_p_int pOut) {
    aiReturn ret = (aiReturn)Assimp_NETPINVOKE.aiGetMaterialInteger(aiMaterial.getCPtr(pMat), pKey, type, index, SWIGTYPE_p_int.getCPtr(pOut));
    return ret;
  }

  public static aiReturn aiGetMaterialColor(aiMaterial pMat, string pKey, uint type, uint index, SWIGTYPE_p_aiColor4D pOut) {
    aiReturn ret = (aiReturn)Assimp_NETPINVOKE.aiGetMaterialColor(aiMaterial.getCPtr(pMat), pKey, type, index, SWIGTYPE_p_aiColor4D.getCPtr(pOut));
    return ret;
  }

  public static aiReturn aiGetMaterialString(aiMaterial pMat, string pKey, uint type, uint index, aiString pOut) {
    aiReturn ret = (aiReturn)Assimp_NETPINVOKE.aiGetMaterialString(aiMaterial.getCPtr(pMat), pKey, type, index, aiString.getCPtr(pOut));
    return ret;
  }

  public static uint aiGetMaterialTextureCount(aiMaterial pMat, aiTextureType type) {
    uint ret = Assimp_NETPINVOKE.aiGetMaterialTextureCount(aiMaterial.getCPtr(pMat), (int)type);
    return ret;
  }

  public static aiReturn aiGetMaterialTexture(aiMaterial mat, aiTextureType type, uint index, aiString path, SWIGTYPE_p_aiTextureMapping mapping, SWIGTYPE_p_unsigned_int uvindex, SWIGTYPE_p_float blend, SWIGTYPE_p_aiTextureOp op, SWIGTYPE_p_aiTextureMapMode mapmode, SWIGTYPE_p_unsigned_int flags) {
    aiReturn ret = (aiReturn)Assimp_NETPINVOKE.aiGetMaterialTexture(aiMaterial.getCPtr(mat), (int)type, index, aiString.getCPtr(path), SWIGTYPE_p_aiTextureMapping.getCPtr(mapping), SWIGTYPE_p_unsigned_int.getCPtr(uvindex), SWIGTYPE_p_float.getCPtr(blend), SWIGTYPE_p_aiTextureOp.getCPtr(op), SWIGTYPE_p_aiTextureMapMode.getCPtr(mapmode), SWIGTYPE_p_unsigned_int.getCPtr(flags));
    return ret;
  }

  public static aiScene aiImportFileEx(string arg0, uint arg1, aiFileIO arg2) {
    IntPtr cPtr = Assimp_NETPINVOKE.aiImportFileEx(arg0, arg1, aiFileIO.getCPtr(arg2));
    aiScene ret = (cPtr == IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public static aiScene aiImportFileFromMemory(string arg0, uint arg1, uint arg2, string arg3) {
    IntPtr cPtr = Assimp_NETPINVOKE.aiImportFileFromMemory(arg0, arg1, arg2, arg3);
    aiScene ret = (cPtr == IntPtr.Zero) ? null : new aiScene(cPtr, false);
    return ret;
  }

  public static readonly double AI_MATH_PI = Assimp_NETPINVOKE.AI_MATH_PI_get();
  public static readonly double AI_MATH_TWO_PI = Assimp_NETPINVOKE.AI_MATH_TWO_PI_get();
  public static readonly double AI_MATH_HALF_PI = Assimp_NETPINVOKE.AI_MATH_HALF_PI_get();
  public static readonly double AI_MATH_PI_F = Assimp_NETPINVOKE.AI_MATH_PI_F_get();
  public static readonly double AI_MATH_TWO_PI_F = Assimp_NETPINVOKE.AI_MATH_TWO_PI_F_get();
  public static readonly double AI_MATH_HALF_PI_F = Assimp_NETPINVOKE.AI_MATH_HALF_PI_F_get();
  public static readonly string AI_CONFIG_PP_CT_MAX_SMOOTHING_ANGLE = Assimp_NETPINVOKE.AI_CONFIG_PP_CT_MAX_SMOOTHING_ANGLE_get();
  public static readonly string AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE = Assimp_NETPINVOKE.AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE_get();
  public static readonly string AI_CONFIG_IMPORT_MDL_COLORMAP = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_MDL_COLORMAP_get();
  public static readonly string AI_CONFIG_PP_RRM_EXCLUDE_LIST = Assimp_NETPINVOKE.AI_CONFIG_PP_RRM_EXCLUDE_LIST_get();
  public static readonly string AI_CONFIG_PP_PTV_KEEP_HIERARCHY = Assimp_NETPINVOKE.AI_CONFIG_PP_PTV_KEEP_HIERARCHY_get();
  public static readonly string AI_CONFIG_PP_PTV_NORMALIZE = Assimp_NETPINVOKE.AI_CONFIG_PP_PTV_NORMALIZE_get();
  public static readonly string AI_CONFIG_PP_FD_REMOVE = Assimp_NETPINVOKE.AI_CONFIG_PP_FD_REMOVE_get();
  public static readonly string AI_CONFIG_PP_OG_EXCLUDE_LIST = Assimp_NETPINVOKE.AI_CONFIG_PP_OG_EXCLUDE_LIST_get();
  public static readonly string AI_CONFIG_PP_SLM_TRIANGLE_LIMIT = Assimp_NETPINVOKE.AI_CONFIG_PP_SLM_TRIANGLE_LIMIT_get();
  public static readonly int AI_SLM_DEFAULT_MAX_TRIANGLES = Assimp_NETPINVOKE.AI_SLM_DEFAULT_MAX_TRIANGLES_get();
  public static readonly string AI_CONFIG_PP_SLM_VERTEX_LIMIT = Assimp_NETPINVOKE.AI_CONFIG_PP_SLM_VERTEX_LIMIT_get();
  public static readonly int AI_SLM_DEFAULT_MAX_VERTICES = Assimp_NETPINVOKE.AI_SLM_DEFAULT_MAX_VERTICES_get();
  public static readonly string AI_CONFIG_PP_LBW_MAX_WEIGHTS = Assimp_NETPINVOKE.AI_CONFIG_PP_LBW_MAX_WEIGHTS_get();
  public static readonly int AI_LMW_MAX_WEIGHTS = Assimp_NETPINVOKE.AI_LMW_MAX_WEIGHTS_get();
  public static readonly int PP_ICL_PTCACHE_SIZE = Assimp_NETPINVOKE.PP_ICL_PTCACHE_SIZE_get();
  public static readonly string AI_CONFIG_PP_ICL_PTCACHE_SIZE = Assimp_NETPINVOKE.AI_CONFIG_PP_ICL_PTCACHE_SIZE_get();
  public static readonly string AI_CONFIG_PP_RVC_FLAGS = Assimp_NETPINVOKE.AI_CONFIG_PP_RVC_FLAGS_get();
  public static readonly string AI_CONFIG_PP_SBP_REMOVE = Assimp_NETPINVOKE.AI_CONFIG_PP_SBP_REMOVE_get();
  public static readonly string AI_CONFIG_PP_FID_ANIM_ACCURACY = Assimp_NETPINVOKE.AI_CONFIG_PP_FID_ANIM_ACCURACY_get();
  public static readonly int AI_UVTRAFO_SCALING = Assimp_NETPINVOKE.AI_UVTRAFO_SCALING_get();
  public static readonly int AI_UVTRAFO_ROTATION = Assimp_NETPINVOKE.AI_UVTRAFO_ROTATION_get();
  public static readonly int AI_UVTRAFO_TRANSLATION = Assimp_NETPINVOKE.AI_UVTRAFO_TRANSLATION_get();
  public static readonly int AI_UVTRAFO_ALL = Assimp_NETPINVOKE.AI_UVTRAFO_ALL_get();
  public static readonly string AI_CONFIG_PP_TUV_EVALUATE = Assimp_NETPINVOKE.AI_CONFIG_PP_TUV_EVALUATE_get();
  public static readonly string AI_CONFIG_FAVOUR_SPEED = Assimp_NETPINVOKE.AI_CONFIG_FAVOUR_SPEED_get();
  public static readonly string AI_CONFIG_IMPORT_GLOBAL_KEYFRAME = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_GLOBAL_KEYFRAME_get();
  public static readonly string AI_CONFIG_IMPORT_MD3_KEYFRAME = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_MD3_KEYFRAME_get();
  public static readonly string AI_CONFIG_IMPORT_MD2_KEYFRAME = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_MD2_KEYFRAME_get();
  public static readonly string AI_CONFIG_IMPORT_MDL_KEYFRAME = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_MDL_KEYFRAME_get();
  public static readonly string AI_CONFIG_IMPORT_MDC_KEYFRAME = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_MDC_KEYFRAME_get();
  public static readonly string AI_CONFIG_IMPORT_SMD_KEYFRAME = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_SMD_KEYFRAME_get();
  public static readonly string AI_CONFIG_IMPORT_UNREAL_KEYFRAME = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_UNREAL_KEYFRAME_get();
  public static readonly string AI_CONFIG_IMPORT_AC_SEPARATE_BFCULL = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_AC_SEPARATE_BFCULL_get();
  public static readonly string AI_CONFIG_IMPORT_AC_EVAL_SUBDIVISION = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_AC_EVAL_SUBDIVISION_get();
  public static readonly string AI_CONFIG_IMPORT_UNREAL_HANDLE_FLAGS = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_UNREAL_HANDLE_FLAGS_get();
  public static readonly string AI_CONFIG_IMPORT_TER_MAKE_UVS = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_TER_MAKE_UVS_get();
  public static readonly string AI_CONFIG_IMPORT_ASE_RECONSTRUCT_NORMALS = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_ASE_RECONSTRUCT_NORMALS_get();
  public static readonly string AI_CONFIG_IMPORT_MD3_HANDLE_MULTIPART = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_MD3_HANDLE_MULTIPART_get();
  public static readonly string AI_CONFIG_IMPORT_MD3_SKIN_NAME = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_MD3_SKIN_NAME_get();
  public static readonly string AI_CONFIG_IMPORT_MD3_SHADER_SRC = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_MD3_SHADER_SRC_get();
  public static readonly string AI_CONFIG_IMPORT_LWO_ONE_LAYER_ONLY = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_LWO_ONE_LAYER_ONLY_get();
  public static readonly string AI_CONFIG_IMPORT_MD5_NO_ANIM_AUTOLOAD = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_MD5_NO_ANIM_AUTOLOAD_get();
  public static readonly string AI_CONFIG_IMPORT_LWS_ANIM_START = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_LWS_ANIM_START_get();
  public static readonly string AI_CONFIG_IMPORT_LWS_ANIM_END = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_LWS_ANIM_END_get();
  public static readonly string AI_CONFIG_IMPORT_IRR_ANIM_FPS = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_IRR_ANIM_FPS_get();
  public static readonly string AI_CONFIG_IMPORT_OGRE_MATERIAL_FILE = Assimp_NETPINVOKE.AI_CONFIG_IMPORT_OGRE_MATERIAL_FILE_get();
  public static readonly int AI_MAX_NUMBER_OF_COLOR_SETS = Assimp_NETPINVOKE.AI_MAX_NUMBER_OF_COLOR_SETS_get();
  public static readonly int AI_MAX_NUMBER_OF_TEXTURECOORDS = Assimp_NETPINVOKE.AI_MAX_NUMBER_OF_TEXTURECOORDS_get();
  public static readonly string AI_DEFAULT_MATERIAL_NAME = Assimp_NETPINVOKE.AI_DEFAULT_MATERIAL_NAME_get();
  public static readonly string AI_DEFAULT_TEXTURED_MATERIAL_NAME = Assimp_NETPINVOKE.AI_DEFAULT_TEXTURED_MATERIAL_NAME_get();
  public static readonly string _AI_MATKEY_TEXTURE_BASE = Assimp_NETPINVOKE._AI_MATKEY_TEXTURE_BASE_get();
  public static readonly string _AI_MATKEY_UVWSRC_BASE = Assimp_NETPINVOKE._AI_MATKEY_UVWSRC_BASE_get();
  public static readonly string _AI_MATKEY_TEXOP_BASE = Assimp_NETPINVOKE._AI_MATKEY_TEXOP_BASE_get();
  public static readonly string _AI_MATKEY_MAPPING_BASE = Assimp_NETPINVOKE._AI_MATKEY_MAPPING_BASE_get();
  public static readonly string _AI_MATKEY_TEXBLEND_BASE = Assimp_NETPINVOKE._AI_MATKEY_TEXBLEND_BASE_get();
  public static readonly string _AI_MATKEY_MAPPINGMODE_U_BASE = Assimp_NETPINVOKE._AI_MATKEY_MAPPINGMODE_U_BASE_get();
  public static readonly string _AI_MATKEY_MAPPINGMODE_V_BASE = Assimp_NETPINVOKE._AI_MATKEY_MAPPINGMODE_V_BASE_get();
  public static readonly string _AI_MATKEY_TEXMAP_AXIS_BASE = Assimp_NETPINVOKE._AI_MATKEY_TEXMAP_AXIS_BASE_get();
  public static readonly string _AI_MATKEY_UVTRANSFORM_BASE = Assimp_NETPINVOKE._AI_MATKEY_UVTRANSFORM_BASE_get();
  public static readonly string _AI_MATKEY_TEXFLAGS_BASE = Assimp_NETPINVOKE._AI_MATKEY_TEXFLAGS_BASE_get();
  public static readonly int AI_SCENE_FLAGS_INCOMPLETE = Assimp_NETPINVOKE.AI_SCENE_FLAGS_INCOMPLETE_get();
  public static readonly int AI_SCENE_FLAGS_VALIDATED = Assimp_NETPINVOKE.AI_SCENE_FLAGS_VALIDATED_get();
  public static readonly int AI_SCENE_FLAGS_VALIDATION_WARNING = Assimp_NETPINVOKE.AI_SCENE_FLAGS_VALIDATION_WARNING_get();
  public static readonly int AI_SCENE_FLAGS_NON_VERBOSE_FORMAT = Assimp_NETPINVOKE.AI_SCENE_FLAGS_NON_VERBOSE_FORMAT_get();
  public static readonly int AI_SCENE_FLAGS_TERRAIN = Assimp_NETPINVOKE.AI_SCENE_FLAGS_TERRAIN_get();
  public static readonly int AI_PROPERTY_WAS_NOT_EXISTING = Assimp_NETPINVOKE.AI_PROPERTY_WAS_NOT_EXISTING_get();
  public static readonly uint MAX_LOG_MESSAGE_LENGTH = Assimp_NETPINVOKE.MAX_LOG_MESSAGE_LENGTH_get();
}
