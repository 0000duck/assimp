/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class aiMesh : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal aiMesh(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(aiMesh obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~aiMesh() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AssimpPINVOKE.delete_aiMesh(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public uint mPrimitiveTypes {
    set {
      AssimpPINVOKE.aiMesh_mPrimitiveTypes_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiMesh_mPrimitiveTypes_get(swigCPtr);
      return ret;
    } 
  }

  public uint mNumVertices {
    set {
      AssimpPINVOKE.aiMesh_mNumVertices_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiMesh_mNumVertices_get(swigCPtr);
      return ret;
    } 
  }

  public uint mNumFaces {
    set {
      AssimpPINVOKE.aiMesh_mNumFaces_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiMesh_mNumFaces_get(swigCPtr);
      return ret;
    } 
  }

  public aiVector3D mVertices {
    set {
      AssimpPINVOKE.aiMesh_mVertices_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiMesh_mVertices_get(swigCPtr);
      aiVector3D ret = (cPtr == IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mNormals {
    set {
      AssimpPINVOKE.aiMesh_mNormals_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiMesh_mNormals_get(swigCPtr);
      aiVector3D ret = (cPtr == IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mTangents {
    set {
      AssimpPINVOKE.aiMesh_mTangents_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiMesh_mTangents_get(swigCPtr);
      aiVector3D ret = (cPtr == IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public aiVector3D mBitangents {
    set {
      AssimpPINVOKE.aiMesh_mBitangents_set(swigCPtr, aiVector3D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiMesh_mBitangents_get(swigCPtr);
      aiVector3D ret = (cPtr == IntPtr.Zero) ? null : new aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_aiColor4D mColors {
    set {
      AssimpPINVOKE.aiMesh_mColors_set(swigCPtr, SWIGTYPE_p_p_aiColor4D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiMesh_mColors_get(swigCPtr);
      SWIGTYPE_p_p_aiColor4D ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_aiColor4D(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_aiVector3D mTextureCoords {
    set {
      AssimpPINVOKE.aiMesh_mTextureCoords_set(swigCPtr, SWIGTYPE_p_p_aiVector3D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiMesh_mTextureCoords_get(swigCPtr);
      SWIGTYPE_p_p_aiVector3D ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_aiVector3D(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int mNumUVComponents {
    set {
      AssimpPINVOKE.aiMesh_mNumUVComponents_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiMesh_mNumUVComponents_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public aiFace mFaces {
    set {
      AssimpPINVOKE.aiMesh_mFaces_set(swigCPtr, aiFace.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiMesh_mFaces_get(swigCPtr);
      aiFace ret = (cPtr == IntPtr.Zero) ? null : new aiFace(cPtr, false);
      return ret;
    } 
  }

  public uint mNumBones {
    set {
      AssimpPINVOKE.aiMesh_mNumBones_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiMesh_mNumBones_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_aiBone mBones {
    set {
      AssimpPINVOKE.aiMesh_mBones_set(swigCPtr, SWIGTYPE_p_p_aiBone.getCPtr(value));
    } 
    get {
      IntPtr cPtr = AssimpPINVOKE.aiMesh_mBones_get(swigCPtr);
      SWIGTYPE_p_p_aiBone ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_aiBone(cPtr, false);
      return ret;
    } 
  }

  public uint mMaterialIndex {
    set {
      AssimpPINVOKE.aiMesh_mMaterialIndex_set(swigCPtr, value);
    } 
    get {
      uint ret = AssimpPINVOKE.aiMesh_mMaterialIndex_get(swigCPtr);
      return ret;
    } 
  }

  public aiMesh() : this(AssimpPINVOKE.new_aiMesh(), true) {
  }

  public bool HasPositions() {
    bool ret = AssimpPINVOKE.aiMesh_HasPositions(swigCPtr);
    return ret;
  }

  public bool HasFaces() {
    bool ret = AssimpPINVOKE.aiMesh_HasFaces(swigCPtr);
    return ret;
  }

  public bool HasNormals() {
    bool ret = AssimpPINVOKE.aiMesh_HasNormals(swigCPtr);
    return ret;
  }

  public bool HasTangentsAndBitangents() {
    bool ret = AssimpPINVOKE.aiMesh_HasTangentsAndBitangents(swigCPtr);
    return ret;
  }

  public bool HasVertexColors(uint pIndex) {
    bool ret = AssimpPINVOKE.aiMesh_HasVertexColors(swigCPtr, pIndex);
    return ret;
  }

  public bool HasTextureCoords(uint pIndex) {
    bool ret = AssimpPINVOKE.aiMesh_HasTextureCoords(swigCPtr, pIndex);
    return ret;
  }

  public uint GetNumUVChannels() {
    uint ret = AssimpPINVOKE.aiMesh_GetNumUVChannels(swigCPtr);
    return ret;
  }

  public uint GetNumColorChannels() {
    uint ret = AssimpPINVOKE.aiMesh_GetNumColorChannels(swigCPtr);
    return ret;
  }

  public bool HasBones() {
    bool ret = AssimpPINVOKE.aiMesh_HasBones(swigCPtr);
    return ret;
  }

}
