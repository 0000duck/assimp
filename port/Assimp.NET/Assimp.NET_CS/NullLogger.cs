/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class NullLogger : Logger {
  private HandleRef swigCPtr;

  internal NullLogger(IntPtr cPtr, bool cMemoryOwn) : base(Assimp_NETPINVOKE.NullLoggerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(NullLogger obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~NullLogger() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Assimp_NETPINVOKE.delete_NullLogger(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void OnDebug(string message) {
    Assimp_NETPINVOKE.NullLogger_OnDebug(swigCPtr, message);
  }

  public virtual void OnInfo(string message) {
    Assimp_NETPINVOKE.NullLogger_OnInfo(swigCPtr, message);
  }

  public virtual void OnWarn(string message) {
    Assimp_NETPINVOKE.NullLogger_OnWarn(swigCPtr, message);
  }

  public virtual void OnError(string message) {
    Assimp_NETPINVOKE.NullLogger_OnError(swigCPtr, message);
  }

  public override bool attachStream(LogStream pStream, uint severity) {
    bool ret = Assimp_NETPINVOKE.NullLogger_attachStream(swigCPtr, LogStream.getCPtr(pStream), severity);
    return ret;
  }

  public override bool detatchStream(LogStream pStream, uint severity) {
    bool ret = Assimp_NETPINVOKE.NullLogger_detatchStream(swigCPtr, LogStream.getCPtr(pStream), severity);
    return ret;
  }

}
